security:
    password_hashers:
        # Our user class and the algorithm we'll use to encode passwords
        # 'auto' means to let Symfony choose the best possible password hasher (Argon2 or Bcrypt)
        # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        # https://symfony.com/doc/current/security/user_provider.html
        # In this example, users are stored via Doctrine in the database
        # To see the users at src/App/DataFixtures/ORM/LoadFixtures.php
        # To load users from somewhere else: https://symfony.com/doc/current/security/user_provider.html#creating-a-custom-user-provider
        database_users:
            entity: { class: App\Entity\User, property: email }

    # https://symfony.com/doc/current/security.html#a-authentication-firewalls
    firewalls:

        registration:
            pattern: ^/registration
            security: false #because this is not an authenticated route, but we still protect it with the rate limiter.

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            # this firewall does not have a 'pattern' option because it applies to all URLs
            user_checker: App\Security\UserChecker
            lazy: true
            provider: database_users

            # This allows the user to login by submitting a username and password
            # Reference: https://symfony.com/doc/current/security/form_login_setup.html
            form_login:
                # The route name that the login form submits to
                check_path: security_login
                # The name of the route where the login form lives
                # When the user tries to access a protected page, they are redirected here
                login_path: security_login
                # The field names of the registration form
                username_parameter: _email
                password_parameter: _password
                # Secure the login form against CSRF
                # Reference: https://symfony.com/doc/current/security/csrf.html
                enable_csrf: true
                # The page users are redirect to when there is no previous page stored in the
                # session (for example when the users access directly to the login page).
#                default_target_path: homepage
                default_target_path: admin_dashboard_index

            # This option allows users to choose to stay logged in for longer than
            # the session lasts using a cookie. Reference: https://symfony.com/doc/current/security/remember_me.html
            remember_me:
                secret: '%kernel.secret%' # required
                lifetime: 604800 # 1 week in seconds
                path: /
                # by default, the feature is enabled by checking a checkbox in the
                # login form , uncomment the following line to always enable it.
                always_remember_me: false

            logout:
                # The route name the user can go to in order to logout
                path: security_logout
                # The name of the route to redirect to after logging out -> TODO: check how to add the _locale Parameter here!
                target: /de/logoutinfo
                # Secure the logout against CSRF
                enable_csrf: false

            # needed because in tests we redefine the 'main' firewall to use
            # HTTP Basic instead of the login form, so this firewall has
            # multiple authenticators
            # See https://symfony.com/doc/current/security/experimental_authenticators.html#configuring-the-authentication-entry-point
            entry_point: 'form_login'

            # configure the maximum login attempts
            login_throttling:
                max_attempts: 3        # per minute ...
                interval: '15 minutes' # ... or in a custom period

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # this is a catch-all for the admin area
        # additional security lives in the controllers
        - { path: '^/(%app_locales%)/user', roles: ROLE_USER }
        - { path: '^/(%app_locales%)/admin', roles: ROLE_ADMIN }
        # Allow access to the homepage for everyone
        - { path: '^/{_locale}/logout', roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^/{_locale}/logoutinfo', roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^/{_locale}', roles: IS_AUTHENTICATED_ANONYMOUSLY }

    # The ROLE_ADMIN role inherits from the ROLE_USER role
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER

when@test:
    # this configuration simplifies testing URLs protected by the security mechanism
    # See https://symfony.com/doc/current/testing/http_authentication.html
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

        firewalls:
            main:
                http_basic: ~
